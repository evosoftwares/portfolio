/**
 * Servi√ßo de Integra√ß√£o com IA para Gera√ß√£o Autom√°tica de Componentes
 * Conecta o modal "Gerar Proposta" com sistemas de IA para gera√ß√£o de c√≥digo
 */

class AIGeneratorService {
  constructor() {
    this.apiKey = process.env.REACT_APP_AI_API_KEY || '';
    this.baseUrl = process.env.REACT_APP_AI_BASE_URL || 'https://api.openai.com/v1';
    this.model = process.env.REACT_APP_AI_MODEL || 'gpt-4';
  }

  /**
   * Gera o prompt para proposta comercial detalhada
   */
  generateProposalPrompt(projectData, screenDatabase, featuresDatabase) {
    return `
# üéØ **Gera√ß√£o de Proposta Comercial Profissional**

## üß† **Contexto**

Voc√™ √© um **Analista de Sistemas Especializado** em elabora√ß√£o de propostas comerciais para projetos de software. Sua miss√£o √©:

1. **ANALISAR** a descri√ß√£o do projeto fornecida
2. **DETERMINAR AUTOMATICAMENTE** quais telas e componentes s√£o necess√°rios
3. **CLASSIFICAR** cada componente segundo metodologia IFPUG
4. **CALCULAR** pontos de fun√ß√£o para cada item
5. **GERAR** proposta comercial completa e detalhada

## üìã **Dados do Projeto para An√°lise**

\`\`\`json
${JSON.stringify({
  projectData,
  availableScreens: screenDatabase,
  availableFeatures: featuresDatabase
}, null, 2)}
\`\`\`

## üîç **TAREFA PRINCIPAL: AN√ÅLISE AUTOM√ÅTICA**

Baseado na descri√ß√£o: **"${projectData.description}"**

Voc√™ deve:
1. **Identificar automaticamente** todas as telas necess√°rias
2. **Determinar** funcionalidades adicionais requeridas  
3. **Justificar** cada escolha baseada na descri√ß√£o
4. **Classificar** cada item segundo IFPUG
5. **Calcular** pontos de fun√ß√£o total

## üìù **Estrutura da Proposta Solicitada**

Gere uma proposta comercial completa seguindo esta estrutura:

### **IMPORTANTE: ESPECIFICA√á√ÉO IFPUG OBRIGAT√ìRIA**

Para cada tela/componente selecionado, voc√™ DEVE gerar uma especifica√ß√£o t√©cnica detalhada incluindo:

#### **An√°lise de Pontos de Fun√ß√£o (IFPUG)**
- **Entradas Externas (EI)**: Processos que recebem dados do usu√°rio
- **Sa√≠das Externas (EO)**: Processos que enviam dados processados
- **Consultas Externas (EQ)**: Processos de consulta sem processamento
- **Arquivos L√≥gicos Internos (ALI)**: Grupos de dados mantidos pela aplica√ß√£o
- **Arquivos de Interface Externa (AIE)**: Grupos de dados de outras aplica√ß√µes

#### **Para cada componente, especifique:**
1. **Nome e descri√ß√£o funcional completa**
2. **Tipo de fun√ß√£o (EI/EO/EQ/ALI/AIE)**
3. **Complexidade (Simples/M√©dia/Complexa)**
4. **Pontos de fun√ß√£o estimados**
5. **Campos de entrada (se aplic√°vel)**
6. **Regras de neg√≥cio**
7. **Valida√ß√µes necess√°rias**
8. **Integra√ß√µes com outros componentes**

### 1. **RESUMO EXECUTIVO**
- Vis√£o geral do projeto
- Objetivos principais
- Valor esperado para o cliente

### 2. **AN√ÅLISE AUTOM√ÅTICA DE REQUISITOS**
OBRIGAT√ìRIO: Baseado na descri√ß√£o do projeto, identifique e justifique:
- Telas e componentes necess√°rios (com justificativa)
- Funcionalidades adicionais requeridas (com justificativa)
- Integra√ß√µes identificadas na descri√ß√£o
- Fluxos de processo inferidos

### 3. **ESPECIFICA√á√ÉO T√âCNICA DETALHADA (IFPUG)**
OBRIGAT√ìRIO: Para cada tela/componente IDENTIFICADO AUTOMATICAMENTE, gere especifica√ß√£o completa incluindo:
- Descri√ß√£o funcional detalhada
- Justificativa para inclus√£o (baseada na descri√ß√£o)
- Classifica√ß√£o IFPUG (EI/EO/EQ/ALI/AIE)
- Complexidade e pontos de fun√ß√£o
- Campos de entrada/sa√≠da
- Regras de neg√≥cio e valida√ß√µes
- Fluxos de processo
- Integra√ß√µes necess√°rias

### 4. **ESCOPO DO PROJETO**
- Descri√ß√£o detalhada das funcionalidades
- Lista completa de telas/componentes identificados
- Resumo dos pontos de fun√ß√£o totais

### 5. **AN√ÅLISE DE PONTOS DE FUN√á√ÉO (RESUMO)**
- Total de pontos de fun√ß√£o por categoria
- Fator de ajuste t√©cnico
- Pontos de fun√ß√£o ajustados
- Estimativa de esfor√ßo baseada em PF

### 6. **METODOLOGIA E PROCESSO**
- Metodologia de desenvolvimento (√Ågil/Scrum)
- Fases do projeto
- Cronograma detalhado

### 7. **TECNOLOGIAS E ARQUITETURA**
- Stack tecnol√≥gico recomendado
- Arquitetura da solu√ß√£o
- Justificativas t√©cnicas

### 8. **ENTREGAS E MARCOS**
- Principais entregas por fase
- Marcos de aprova√ß√£o
- Crit√©rios de aceite

### 9. **EQUIPE E RECURSOS**
- Perfis profissionais necess√°rios
- Dedica√ß√£o por papel
- Estrutura organizacional

### 10. **INVESTIMENTO E CONDI√á√ïES**
- Estimativa baseada em an√°lise autom√°tica
- Estimativa baseada em pontos de fun√ß√£o
- Estrutura de pagamento: ${projectData.paymentMethod}
- Desconto aplicado: ${projectData.discount}%
- Condi√ß√µes comerciais

### 11. **RISCOS E MITIGA√á√ïES**
- Principais riscos identificados
- Estrat√©gias de mitiga√ß√£o
- Planos de conting√™ncia

### 12. **GARANTIAS E SUPORTE**
- Per√≠odo de garantia
- Suporte p√≥s-entrega
- Manuten√ß√µes evolutivas

### 13. **PR√ìXIMOS PASSOS**
- Processo de aprova√ß√£o
- In√≠cio do projeto
- Cronograma de kick-off

## üé® **Diretrizes de Formata√ß√£o**

- Use **markdown** para formata√ß√£o
- Inclua **emojis** para melhor visual
- Crie **tabelas** para cronogramas e custos
- Use **listas** bem estruturadas
- Mantenha tom **profissional** mas **acess√≠vel**

## üìä **Instru√ß√µes Espec√≠ficas de An√°lise**

1. **AN√ÅLISE AUTOM√ÅTICA OBRIGAT√ìRIA**: N√£o use telas pr√©-selecionadas. Analise a descri√ß√£o e determine quais s√£o necess√°rias.

2. **JUSTIFICATIVA**: Para cada tela/componente identificado, explique POR QUE √© necess√°rio baseado na descri√ß√£o.

3. **C√ÅLCULOS IFPUG**: Para cada componente, calcule pontos de fun√ß√£o considerando:
   - Complexidade do projeto: "${projectData.projectComplexity}"
   - Tipo de fun√ß√£o (EI/EO/EQ/ALI/AIE)
   - Fatores de complexidade

4. **ESTIMATIVAS**: 
   - Use pontos de fun√ß√£o para calcular esfor√ßo
   - Compare com estimativa base fornecida
   - Aplique desconto de ${projectData.discount}%
   - Estruture pagamento: "${projectData.paymentMethod}"

**CR√çTICO**: 
- **N√ÉO** use telas pr√©-selecionadas
- **SEMPRE** analise a descri√ß√£o primeiro
- **JUSTIFIQUE** cada escolha de componente
- **CALCULE** pontos de fun√ß√£o para cada item
- A proposta deve ser **comercialmente vi√°vel** e **tecnicamente s√≥lida**
`;
  }

  /**
   * Gera o prompt estrat√©gico para IA baseado nos dados da proposta (vers√£o anterior mantida)
   */
  generateComponentsPrompt(projectData, screenDatabase, featuresDatabase) {
    return `
# üéØ **Prompt Estrat√©gico para IA - Gera√ß√£o Autom√°tica de Componentes e Telas**

## üß† **Contexto do Sistema**

Voc√™ √© um **Arquiteto de Software Especializado** em gera√ß√£o autom√°tica de componentes React/Next.js. Sua miss√£o √© analisar os dados estruturados de uma proposta de projeto e gerar automaticamente todos os componentes, telas e funcionalidades necess√°rias, seguindo os padr√µes de design e arquitetura estabelecidos no sistema evoSGA.

## üìã **Dados de Entrada da Proposta**

\`\`\`json
${JSON.stringify({
  projectData,
  screenDatabase,
  featuresDatabase
}, null, 2)}
\`\`\`

## üèóÔ∏è **Arquitetura de Sa√≠da Esperada**

Para cada tela selecionada, voc√™ deve gerar:

### **1. Componente React Principal**
\`\`\`javascript
// Estrutura base para cada componente
import React, { useState, useEffect } from 'react';
import { Modal, Button, Input, Select } from '../ui';

const [NomeDoComponente] = () => {
  // Estado e l√≥gica baseados na complexidade: ${projectData.projectComplexity}
  // Implementa√ß√£o completa da funcionalidade
  // Integra√ß√£o com Firebase (se necess√°rio)
  
  return (
    // JSX completo com design system estabelecido
  );
};

export default [NomeDoComponente];
\`\`\`

### **2. Padr√µes de Design Obrigat√≥rios**
- **Border Radius**: \`rounded-2xl\` (16px) e \`rounded-3xl\` (24px)
- **Cores Prim√°rias**: 
  - Azul: \`blue-500\` (#3b82f6)
  - Verde: \`green-500\` para sucessos
  - Vermelho: \`red-500\` para erros
  - Cinza: \`gray-50\` a \`gray-900\` para neutros
- **Espa√ßamento**: Sistema Tailwind (p-4, p-6, p-8, etc.)
- **√çcones**: Flaticon (\`fi fi-rr-[nome]\`)
- **Sombras**: \`shadow-sm\`, \`shadow-md\`, \`shadow-lg\`
- **Transi√ß√µes**: \`transition-all duration-200\`

### **3. Regras de Complexidade**

**Complexidade: ${projectData.projectComplexity.toUpperCase()}**

${this.getComplexityRules(projectData.projectComplexity)}

### **4. Funcionalidades Adicionais Selecionadas**

${projectData.additionalFeatures.map(featureId => {
  const feature = featuresDatabase.find(f => f.id === featureId);
  return feature ? `- **${feature.name}**: ${feature.description}` : '';
}).filter(Boolean).join('\n')}

### **5. Estimativas do Projeto**
- **Telas Selecionadas**: ${projectData.selectedScreens.length}
- **Funcionalidades Adicionais**: ${projectData.additionalFeatures.length}
- **Horas Estimadas**: ${projectData.estimatedHours}h
- **Desconto Aplicado**: ${projectData.discount}%

## üöÄ **Instru√ß√µes de Execu√ß√£o**

1. **An√°lise dos Dados**: Processe o JSON de entrada e identifique padr√µes
2. **Gera√ß√£o de Componentes**: Crie cada componente seguindo os padr√µes estabelecidos
3. **Integra√ß√£o Autom√°tica**: Configure rotas e navega√ß√£o
4. **Testes B√°sicos**: Gere testes unit√°rios simples
5. **Documenta√ß√£o**: Crie README para cada componente gerado

## üìù **Formato de Resposta Esperado**

Retorne um JSON estruturado com todos os arquivos gerados, suas depend√™ncias e instru√ß√µes de integra√ß√£o.

**IMPORTANTE**: Gere c√≥digo funcional e pronto para produ√ß√£o, seguindo exatamente os padr√µes visuais e de arquitetura do evoSGA.
`;
  }

  /**
   * Retorna as regras espec√≠ficas para cada n√≠vel de complexidade
   */
  getComplexityRules(complexity) {
    const rules = {
      simple: `
- Layout b√°sico com componentes UI existentes
- Formul√°rios simples com valida√ß√£o b√°sica
- Listagens com pagina√ß√£o simples
- Sem anima√ß√µes complexas
- Componentes funcionais diretos`,
      
      medium: `
- Componentes interativos com estado
- Valida√ß√µes avan√ßadas
- Filtros e busca
- Modais e dropdowns
- Anima√ß√µes sutis
- Integra√ß√£o com APIs b√°sicas`,
      
      complex: `
- Componentes com l√≥gica avan√ßada
- Integra√ß√µes com APIs complexas
- Anima√ß√µes e transi√ß√µes elaboradas
- Drag & drop
- Gr√°ficos e visualiza√ß√µes
- Real-time updates
- Micro-intera√ß√µes avan√ßadas`
    };

    return rules[complexity] || rules.medium;
  }

  /**
   * Extrai detalhes das telas selecionadas
   */
  getSelectedScreenDetails(selectedScreenIds, screenDatabase) {
    const allScreens = screenDatabase.categories.flatMap(category => 
      category.screens.map(screen => ({ ...screen, category: category.category }))
    );
    
    return selectedScreenIds.map(id => 
      allScreens.find(screen => screen.id === id)
    ).filter(Boolean);
  }

  /**
   * Extrai detalhes das funcionalidades selecionadas
   */
  getSelectedFeatureDetails(selectedFeatureIds, featuresDatabase) {
    return selectedFeatureIds.map(id => 
      featuresDatabase.find(feature => feature.id === id)
    ).filter(Boolean);
  }

  /**
   * Gera proposta comercial completa
   */
  async generateProposal(projectData, screenDatabase, featuresDatabase) {
    try {
      const prompt = this.generateProposalPrompt(projectData, screenDatabase, featuresDatabase);
      
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.model,
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um consultor de tecnologia especializado em elabora√ß√£o de propostas comerciais profissionais para projetos de software. Sempre responda em portugu√™s brasileiro com linguagem t√©cnica mas acess√≠vel.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 4000
        })
      });

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      
      return {
        proposal: data.choices[0].message.content,
        success: true,
        type: 'proposal'
      };
      
    } catch (error) {
      console.error('Erro ao gerar proposta com IA:', error);
      throw new Error(`Falha na gera√ß√£o da proposta: ${error.message}`);
    }
  }

  /**
   * Envia dados para IA e recebe componentes gerados
   */
  async generateComponents(projectData, screenDatabase, featuresDatabase) {
    try {
      const prompt = this.generatePrompt(projectData, screenDatabase, featuresDatabase);
      
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.model,
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um arquiteto de software especializado em React/Next.js e gera√ß√£o autom√°tica de componentes. Responda sempre em JSON estruturado.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3,
          max_tokens: 4000
        })
      });

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      
      return this.parseAIResponse(data.choices[0].message.content);
      
    } catch (error) {
      console.error('Erro ao gerar componentes com IA:', error);
      throw new Error(`Falha na gera√ß√£o autom√°tica: ${error.message}`);
    }
  }

  /**
   * Processa e valida a resposta da IA
   */
  parseAIResponse(aiResponse) {
    try {
      // Tenta extrair JSON da resposta
      const jsonMatch = aiResponse.match(/```json\n([\s\S]*?)\n```/) || 
                       aiResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        const jsonString = jsonMatch[1] || jsonMatch[0];
        return JSON.parse(jsonString);
      }

      // Se n√£o encontrou JSON, retorna estrutura padr√£o
      return {
        generatedFiles: [],
        projectStructure: {
          totalFiles: 0,
          totalLines: 0,
          estimatedDevelopmentTime: "0 horas"
        },
        integrationInstructions: [],
        error: "Resposta da IA n√£o cont√©m JSON v√°lido"
      };

    } catch (error) {
      console.error('Erro ao processar resposta da IA:', error);
      return {
        generatedFiles: [],
        projectStructure: {
          totalFiles: 0,
          totalLines: 0,
          estimatedDevelopmentTime: "0 horas"
        },
        integrationInstructions: [],
        error: `Erro ao processar resposta: ${error.message}`
      };
    }
  }

  /**
   * Analisa automaticamente a descri√ß√£o do projeto e determina componentes necess√°rios
   */
  analyzeProjectDescription(description, screenDatabase, featuresDatabase, complexity) {
    // An√°lise por palavras-chave na descri√ß√£o
    const lowerDescription = description.toLowerCase();
    
    // Mapear palavras-chave para componentes
    const keywordMapping = {
      // Autentica√ß√£o
      'login': ['login'],
      'cadastro': ['register'],
      'registro': ['register'],
      'senha': ['login', 'forgot-password'],
      'perfil': ['profile'],
      'usu√°rio': ['profile', 'user-settings'],
      
      // Dashboard
      'dashboard': ['dashboard'],
      'painel': ['dashboard'],
      'resumo': ['dashboard'],
      'm√©tricas': ['dashboard', 'analytics-dashboard'],
      
      // Gest√£o
      'gerenciar': ['user-management', 'data-table'],
      'administrar': ['admin-panel', 'user-management'],
      'crud': ['data-table', 'form-create', 'form-edit'],
      'tabela': ['data-table'],
      'listagem': ['data-table'],
      'formul√°rio': ['form-create', 'form-edit'],
      
      // E-commerce
      'produto': ['product-catalog', 'product-detail'],
      'loja': ['product-catalog', 'shopping-cart'],
      'carrinho': ['shopping-cart'],
      'pagamento': ['checkout'],
      'compra': ['checkout', 'order-history'],
      
      // Comunica√ß√£o
      'chat': ['chat'],
      'mensagem': ['chat', 'notifications'],
      'notifica√ß√£o': ['notifications'],
      'email': ['email-templates'],
      
      // Relat√≥rios
      'relat√≥rio': ['reports', 'analytics-dashboard'],
      'gr√°fico': ['charts'],
      'export': ['export-data']
    };

    // Determinar telas necess√°rias baseado na an√°lise
    const identifiedScreenIds = new Set();
    
    Object.entries(keywordMapping).forEach(([keyword, screenIds]) => {
      if (lowerDescription.includes(keyword)) {
        screenIds.forEach(screenId => identifiedScreenIds.add(screenId));
      }
    });

    // Se nenhuma tela espec√≠fica foi identificada, usar conjunto padr√£o baseado no tipo de projeto
    if (identifiedScreenIds.size === 0) {
      // Projeto padr√£o inclui funcionalidades b√°sicas
      ['login', 'register', 'dashboard', 'profile'].forEach(id => identifiedScreenIds.add(id));
    }

    // Adicionar telas complementares baseadas no que foi identificado
    if (identifiedScreenIds.has('login')) {
      identifiedScreenIds.add('forgot-password');
    }
    if (identifiedScreenIds.has('product-catalog')) {
      identifiedScreenIds.add('product-detail');
    }
    if (identifiedScreenIds.has('dashboard')) {
      identifiedScreenIds.add('sidebar');
      identifiedScreenIds.add('header');
    }

    // Converter IDs para objetos completos
    const allScreens = screenDatabase.categories.flatMap(category => 
      category.screens.map(screen => ({ ...screen, category: category.category }))
    );
    
    const screens = Array.from(identifiedScreenIds)
      .map(id => allScreens.find(screen => screen.id === id))
      .filter(Boolean);

    // Determinar funcionalidades adicionais
    const identifiedFeatures = [];
    
    // An√°lise de funcionalidades baseada na descri√ß√£o
    if (lowerDescription.includes('mobile') || lowerDescription.includes('responsiv')) {
      identifiedFeatures.push(featuresDatabase.find(f => f.id === 'responsive'));
    }
    if (lowerDescription.includes('escuro') || lowerDescription.includes('dark')) {
      identifiedFeatures.push(featuresDatabase.find(f => f.id === 'dark-mode'));
    }
    if (lowerDescription.includes('anima√ß') || lowerDescription.includes('transi√ß√£o')) {
      identifiedFeatures.push(featuresDatabase.find(f => f.id === 'animations'));
    }
    if (lowerDescription.includes('offline') || lowerDescription.includes('sem internet')) {
      identifiedFeatures.push(featuresDatabase.find(f => f.id === 'offline'));
    }
    if (lowerDescription.includes('idioma') || lowerDescription.includes('multil√≠ng')) {
      identifiedFeatures.push(featuresDatabase.find(f => f.id === 'multi-language'));
    }

    // Funcionalidades padr√£o baseadas na complexidade
    const defaultFeatures = ['responsive'];
    if (complexity === 'medium' || complexity === 'complex') {
      defaultFeatures.push('dark-mode');
    }
    if (complexity === 'complex') {
      defaultFeatures.push('animations');
    }

    defaultFeatures.forEach(featureId => {
      const feature = featuresDatabase.find(f => f.id === featureId);
      if (feature && !identifiedFeatures.find(f => f?.id === featureId)) {
        identifiedFeatures.push(feature);
      }
    });

    return {
      screens: screens,
      features: identifiedFeatures.filter(Boolean),
      analysis: {
        keywordsFound: Object.keys(keywordMapping).filter(keyword => lowerDescription.includes(keyword)),
        screensIdentified: Array.from(identifiedScreenIds),
        featuresIdentified: identifiedFeatures.map(f => f?.id).filter(Boolean),
        description: description
      }
    };
  }

  /**
   * Analisa automaticamente a descri√ß√£o do projeto sem depend√™ncias externas
   */
  analyzeProjectDescriptionAutomatic(description, complexity = 'medium') {
    const lowerDescription = description.toLowerCase();
    
    // Base de dados interna simplificada de componentes
    const internalScreenDatabase = [
      // Autentica√ß√£o
      { id: 'login', name: 'Tela de Login', category: 'Autentica√ß√£o', description: 'Formul√°rio de autentica√ß√£o com email/senha', keywords: ['login', 'entrar', 'acesso', 'senha'] },
      { id: 'register', name: 'Tela de Cadastro', category: 'Autentica√ß√£o', description: 'Formul√°rio de registro de novos usu√°rios', keywords: ['cadastro', 'registro', 'criar conta'] },
      { id: 'profile', name: 'Perfil do Usu√°rio', category: 'Usu√°rio', description: 'Visualiza√ß√£o e edi√ß√£o de dados pessoais', keywords: ['perfil', 'usu√°rio', 'dados pessoais'] },
      
      // Dashboard
      { id: 'dashboard', name: 'Dashboard Principal', category: 'Dashboard', description: 'Painel principal com m√©tricas e resumos', keywords: ['dashboard', 'painel', 'resumo', 'm√©tricas'] },
      { id: 'sidebar', name: 'Menu Lateral', category: 'Navega√ß√£o', description: 'Navega√ß√£o principal do sistema', keywords: ['menu', 'navega√ß√£o', 'sidebar'] },
      
      // Gest√£o de Dados
      { id: 'data-table', name: 'Tabela de Dados', category: 'Gest√£o', description: 'Listagem com filtros, ordena√ß√£o e pagina√ß√£o', keywords: ['tabela', 'listagem', 'dados', 'gerenciar'] },
      { id: 'form-create', name: 'Formul√°rio de Cria√ß√£o', category: 'Gest√£o', description: 'Formul√°rio para adicionar novos registros', keywords: ['formul√°rio', 'criar', 'adicionar', 'novo'] },
      { id: 'form-edit', name: 'Formul√°rio de Edi√ß√£o', category: 'Gest√£o', description: 'Formul√°rio para editar registros existentes', keywords: ['editar', 'modificar', 'atualizar'] },
      
      // E-commerce
      { id: 'product-catalog', name: 'Cat√°logo de Produtos', category: 'E-commerce', description: 'Listagem de produtos com filtros', keywords: ['produto', 'cat√°logo', 'loja', 'venda'] },
      { id: 'shopping-cart', name: 'Carrinho de Compras', category: 'E-commerce', description: 'Gest√£o de itens selecionados', keywords: ['carrinho', 'compra', 'item'] },
      { id: 'checkout', name: 'Finaliza√ß√£o de Compra', category: 'E-commerce', description: 'Processo de pagamento e entrega', keywords: ['pagamento', 'finalizar', 'checkout'] },
      
      // Comunica√ß√£o
      { id: 'notifications', name: 'Central de Notifica√ß√µes', category: 'Comunica√ß√£o', description: 'Lista de alertas e avisos', keywords: ['notifica√ß√£o', 'alerta', 'aviso'] },
      { id: 'chat', name: 'Chat/Mensagens', category: 'Comunica√ß√£o', description: 'Sistema de comunica√ß√£o interna', keywords: ['chat', 'mensagem', 'conversa'] },
      
      // Relat√≥rios
      { id: 'reports', name: 'Relat√≥rios', category: 'Relat√≥rios', description: 'Gera√ß√£o de relat√≥rios personalizados', keywords: ['relat√≥rio', 'report', 'an√°lise'] },
      { id: 'charts', name: 'Gr√°ficos', category: 'Relat√≥rios', description: 'Visualiza√ß√µes de dados din√¢micas', keywords: ['gr√°fico', 'chart', 'visualiza√ß√£o'] },
      
      // Administra√ß√£o
      { id: 'admin-panel', name: 'Painel Administrativo', category: 'Administra√ß√£o', description: 'Interface de gest√£o do sistema', keywords: ['admin', 'administrativo', 'gest√£o'] },
      { id: 'user-management', name: 'Gest√£o de Usu√°rios', category: 'Administra√ß√£o', description: 'CRUD de usu√°rios e permiss√µes', keywords: ['usu√°rio', 'permiss√£o', 'acesso'] }
    ];

    const internalFeaturesDatabase = [
      { id: 'responsive', name: 'Design Responsivo', description: 'Adapta√ß√£o para mobile, tablet e desktop', keywords: ['responsivo', 'mobile', 'tablet'] },
      { id: 'dark-mode', name: 'Modo Escuro', description: 'Altern√¢ncia entre temas claro e escuro', keywords: ['escuro', 'dark', 'tema'] },
      { id: 'animations', name: 'Anima√ß√µes e Transi√ß√µes', description: 'Efeitos visuais e micro-intera√ß√µes', keywords: ['anima√ß√£o', 'transi√ß√£o', 'efeito'] },
      { id: 'multi-language', name: 'Multi-idioma', description: 'Suporte a m√∫ltiplos idiomas', keywords: ['idioma', 'multil√≠ng', 'internacional'] },
      { id: 'offline', name: 'Modo Offline', description: 'Funcionamento sem conex√£o com internet', keywords: ['offline', 'sem internet'] },
      { id: 'accessibility', name: 'Acessibilidade', description: 'Conformidade com padr√µes WCAG', keywords: ['acessibilidade', 'wcag', 'inclus√£o'] }
    ];

    // Identificar componentes baseado nas keywords
    const identifiedScreens = internalScreenDatabase.filter(screen => 
      screen.keywords.some(keyword => lowerDescription.includes(keyword))
    );

    const identifiedFeatures = internalFeaturesDatabase.filter(feature => 
      feature.keywords.some(keyword => lowerDescription.includes(keyword))
    );

    // Se nenhum componente foi identificado, usar conjunto padr√£o
    if (identifiedScreens.length === 0) {
      identifiedScreens.push(
        ...internalScreenDatabase.filter(s => ['login', 'dashboard', 'profile'].includes(s.id))
      );
    }

    // Adicionar funcionalidades padr√£o baseadas na complexidade
    if (!identifiedFeatures.find(f => f.id === 'responsive')) {
      identifiedFeatures.push(internalFeaturesDatabase.find(f => f.id === 'responsive'));
    }
    
    if (complexity === 'medium' || complexity === 'complex') {
      if (!identifiedFeatures.find(f => f.id === 'dark-mode')) {
        identifiedFeatures.push(internalFeaturesDatabase.find(f => f.id === 'dark-mode'));
      }
    }

    // Adicionar informa√ß√µes de IFPUG e justificativas
    const screensWithDetails = identifiedScreens.map(screen => ({
      ...screen,
      ifpugType: this.getIFPUGType(screen.id),
      functionPoints: this.getFunctionPoints(screen.id, complexity),
      justification: this.getJustification(screen.id, description)
    }));

    const featuresWithDetails = identifiedFeatures.filter(Boolean).map(feature => ({
      ...feature,
      functionPoints: 2,
      justification: this.getFeatureJustification(feature.id, complexity)
    }));

    return {
      screens: screensWithDetails,
      features: featuresWithDetails,
      analysis: {
        keywordsFound: [...identifiedScreens.flatMap(s => s.keywords), ...identifiedFeatures.flatMap(f => f.keywords)]
          .filter(keyword => lowerDescription.includes(keyword)),
        description: description
      }
    };
  }

  /**
   * Determina tipo IFPUG para uma tela
   */
  getIFPUGType(screenId) {
    const types = {
      'login': 'Entrada Externa (EI)',
      'register': 'Entrada Externa (EI)',
      'form-create': 'Entrada Externa (EI)',
      'form-edit': 'Entrada Externa (EI)',
      'dashboard': 'Consulta Externa (EQ)',
      'data-table': 'Consulta Externa (EQ)',
      'reports': 'Sa√≠da Externa (EO)',
      'charts': 'Sa√≠da Externa (EO)'
    };
    return types[screenId] || 'Consulta Externa (EQ)';
  }

  /**
   * Calcula pontos de fun√ß√£o para uma tela
   */
  getFunctionPoints(screenId, complexity) {
    const basePoints = {
      'login': 3,
      'register': 4,
      'dashboard': 5,
      'data-table': 4,
      'form-create': 4,
      'form-edit': 4,
      'product-catalog': 5,
      'checkout': 6,
      'reports': 5,
      'admin-panel': 6
    };
    
    const complexityMultiplier = {
      'simple': 0.8,
      'medium': 1.0,
      'complex': 1.3
    };
    
    const base = basePoints[screenId] || 3;
    return Math.ceil(base * (complexityMultiplier[complexity] || 1.0));
  }

  /**
   * Simula gera√ß√£o de proposta comercial para desenvolvimento/teste
   */
  async mockProposalGeneration(projectData) {
    // Simula delay de API
    await new Promise(resolve => setTimeout(resolve, 3000));

    // IA ANALISA AUTOMATICAMENTE a descri√ß√£o e determina componentes necess√°rios
    const analyzedComponents = this.analyzeProjectDescriptionAutomatic(projectData.description, projectData.projectComplexity);
    const selectedScreens = analyzedComponents.screens;
    const selectedFeatures = analyzedComponents.features;
    
    const valorHora = 120; // R$ por hora
    const valorTotal = projectData.estimatedHours * valorHora;
    const valorComDesconto = valorTotal * (1 - projectData.discount / 100);

    const mockProposal = `# üìã PROPOSTA COMERCIAL - PROJETO DE SOFTWARE

## 1. üìä RESUMO EXECUTIVO

**Projeto:** ${projectData.description || 'Sistema Web Personalizado'}
**Complexidade:** ${projectData.projectComplexity === 'simple' ? 'Simples' : projectData.projectComplexity === 'medium' ? 'M√©dia' : 'Complexa'}
**Estimativa:** ${projectData.estimatedHours} horas de desenvolvimento
**Investimento:** R$ ${valorComDesconto.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}

### üéØ Objetivos Principais
- Desenvolver solu√ß√£o web moderna e responsiva
- Implementar ${selectedScreens.length} telas/componentes principais
- Integrar ${selectedFeatures.length} funcionalidades avan√ßadas
- Garantir experi√™ncia de usu√°rio excepcional

## 2. üîç AN√ÅLISE AUTOM√ÅTICA DE REQUISITOS

Baseado na descri√ß√£o: **"${projectData.description}"**

### Componentes Identificados Automaticamente pela IA:

**Palavras-chave encontradas:** ${analyzedComponents.analysis.keywordsFound.join(', ') || 'An√°lise de contexto aplicada'}

**Justificativa da Sele√ß√£o:**
${selectedScreens.map(screen => `- **${screen.name}**: Necess√°rio para ${this.getJustification(screen.id, projectData.description)}`).join('\n')}

**Funcionalidades Determinadas:**
${selectedFeatures.map(feature => `- **${feature.name}**: ${this.getFeatureJustification(feature.id, projectData.projectComplexity)}`).join('\n')}

## 3. üìã ESPECIFICA√á√ÉO T√âCNICA DETALHADA (IFPUG)

${this.generateIFPUGSpecification(selectedScreens, selectedFeatures, projectData)}

## 4. üîß ESCOPO DO PROJETO

### Resumo de Componentes Identificados (${selectedScreens.length} telas + ${selectedFeatures.length} funcionalidades)
${selectedScreens.map(screen => `- **${screen.name}** (${screen.category}): ${screen.description}`).join('\n')}

### Funcionalidades Adicionais Determinadas
${selectedFeatures.map(feature => `- **${feature.name}**: ${feature.description}`).join('\n')}

### Total de Pontos de Fun√ß√£o Calculados
${this.calculateTotalFunctionPoints(selectedScreens, selectedFeatures, projectData)} PF

## 5. üìä AN√ÅLISE DE PONTOS DE FUN√á√ÉO (RESUMO)

${this.generateFunctionPointSummary(selectedScreens, selectedFeatures, projectData)}

## 6. üíª STACK TECNOL√ìGICO

### Frontend
- **React.js/Next.js** - Framework moderno e perform√°tico
- **TailwindCSS** - Estiliza√ß√£o responsiva e profissional
- **TypeScript** - Maior seguran√ßa e produtividade

### Backend & Infraestrutura
- **Node.js** - Ambiente de execu√ß√£o JavaScript
- **Firebase/Firestore** - Banco de dados em tempo real
- **Vercel/Netlify** - Deploy e hospedagem otimizada

## 7. üìÖ CRONOGRAMA DE DESENVOLVIMENTO

| Fase | Atividade | Dura√ß√£o | Entreg√°veis |
|------|-----------|---------|-------------|
| 1 | Planejamento e Design | 15% | Wireframes, Prot√≥tipo |
| 2 | Desenvolvimento Core | 60% | Funcionalidades principais |
| 3 | Integra√ß√µes e Testes | 20% | Testes, Ajustes |
| 4 | Deploy e Treinamento | 5% | Produ√ß√£o, Documenta√ß√£o |

**Prazo Total Estimado:** ${Math.ceil(this.calculateTotalFunctionPoints(selectedScreens, selectedFeatures, projectData) * 15 / 8)} dias √∫teis (baseado em PF)

## 8. üí∞ INVESTIMENTO E CONDI√á√ïES

### Estrutura de Custos
- **Valor/Hora:** R$ ${valorHora.toLocaleString('pt-BR')}
- **Horas Estimadas:** ${projectData.estimatedHours}h
- **Subtotal:** R$ ${valorTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
- **Desconto:** ${projectData.discount}%
- **VALOR FINAL:** R$ ${valorComDesconto.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}

### Forma de Pagamento
${this.getPaymentDescription(projectData.paymentMethod)}

### Incluso no Projeto
‚úÖ Desenvolvimento completo das funcionalidades
‚úÖ Design responsivo (mobile, tablet, desktop)
‚úÖ Testes de qualidade e performance
‚úÖ Deploy em ambiente de produ√ß√£o
‚úÖ Documenta√ß√£o t√©cnica
‚úÖ 30 dias de garantia e suporte

## 9. üõ°Ô∏è GARANTIAS E SUPORTE

- **Garantia:** 30 dias para corre√ß√£o de bugs
- **Suporte:** Suporte t√©cnico durante desenvolvimento
- **Documenta√ß√£o:** Manual t√©cnico e de usu√°rio
- **Treinamento:** Sess√£o de treinamento da equipe

## 10. ‚ö° PR√ìXIMOS PASSOS

1. **Aprova√ß√£o da Proposta** - An√°lise e aceite comercial
2. **Kickoff Meeting** - Reuni√£o de alinhamento t√©cnico  
3. **In√≠cio do Desenvolvimento** - Sprint de planejamento
4. **Acompanhamento Semanal** - Reviews e feedbacks

---

### üìû Contato
Esta proposta tem validade de **30 dias** e est√° sujeita √† disponibilidade da equipe.

**D√∫vidas?** Entre em contato para esclarecimentos adicionais.

---
*Proposta gerada automaticamente pelo sistema evoSGA em ${new Date().toLocaleDateString('pt-BR')}*`;

    // Calcular total de pontos de fun√ß√£o
    const totalFunctionPoints = selectedScreens.reduce((sum, screen) => sum + (screen.functionPoints || 3), 0) +
                                selectedFeatures.reduce((sum, feature) => sum + (feature.functionPoints || 2), 0);

    return {
      proposal: mockProposal,
      success: true,
      type: 'proposal',
      analysisData: {
        screens: selectedScreens,
        features: selectedFeatures,
        analysis: analyzedComponents.analysis
      },
      metadata: {
        totalValue: valorComDesconto,
        originalValue: valorTotal,
        discount: projectData.discount,
        estimatedHours: projectData.estimatedHours,
        screenCount: selectedScreens.length,
        featureCount: selectedFeatures.length,
        totalFunctionPoints: totalFunctionPoints
      }
    };
  }

  /**
   * Gera especifica√ß√£o IFPUG detalhada para cada componente
   */
  generateIFPUGSpecification(selectedScreens, selectedFeatures, projectData) {
    let specification = '';
    
    // Especifica√ß√£o das telas
    selectedScreens.forEach((screen, index) => {
      const ifpugData = this.getIFPUGDataForScreen(screen, projectData.projectComplexity);
      
      specification += `
### ${index + 1}. **${screen.name}** (${screen.category})

**Descri√ß√£o Funcional:** ${screen.description}

**An√°lise IFPUG:**
- **Tipo de Fun√ß√£o:** ${ifpugData.type}
- **Complexidade:** ${ifpugData.complexity}
- **Pontos de Fun√ß√£o:** ${ifpugData.points} PF

**Especifica√ß√£o Detalhada:**
${ifpugData.specification}

**Campos de Entrada:**
${ifpugData.inputFields.map(field => `- ${field}`).join('\n')}

**Regras de Neg√≥cio:**
${ifpugData.businessRules.map(rule => `- ${rule}`).join('\n')}

**Valida√ß√µes:**
${ifpugData.validations.map(validation => `- ${validation}`).join('\n')}

**Integra√ß√µes:**
${ifpugData.integrations.map(integration => `- ${integration}`).join('\n')}

---
`;
    });

    // Especifica√ß√£o das funcionalidades adicionais
    if (selectedFeatures.length > 0) {
      specification += '\n### Funcionalidades Adicionais\n\n';
      
      selectedFeatures.forEach((feature, index) => {
        const ifpugData = this.getIFPUGDataForFeature(feature, projectData.projectComplexity);
        
        specification += `
#### ${selectedScreens.length + index + 1}. **${feature.name}**

**Descri√ß√£o:** ${feature.description}

**An√°lise IFPUG:**
- **Tipo:** ${ifpugData.type}
- **Complexidade:** ${ifpugData.complexity}
- **Pontos de Fun√ß√£o:** ${ifpugData.points} PF

**Especifica√ß√£o:**
${ifpugData.specification}

---
`;
      });
    }

    return specification;
  }

  /**
   * Gera dados IFPUG para uma tela espec√≠fica
   */
  getIFPUGDataForScreen(screen, complexity) {
    const screenTypes = {
      'login': {
        type: 'Entrada Externa (EI)',
        complexity: complexity === 'simple' ? 'Simples' : complexity === 'complex' ? 'Complexa' : 'M√©dia',
        points: complexity === 'simple' ? 3 : complexity === 'complex' ? 6 : 4,
        specification: 'Processo de autentica√ß√£o que recebe credenciais do usu√°rio, valida contra base de dados e retorna token de acesso.',
        inputFields: ['Email/Username', 'Senha', 'Lembrar-me (opcional)', 'Captcha (se necess√°rio)'],
        businessRules: [
          'Validar formato de email',
          'Verificar senha com crit√©rios de seguran√ßa',
          'Implementar bloqueio ap√≥s tentativas falhidas',
          'Registrar logs de acesso'
        ],
        validations: [
          'Campo email obrigat√≥rio e formato v√°lido',
          'Campo senha obrigat√≥rio, m√≠nimo 8 caracteres',
          'Verificar se usu√°rio est√° ativo',
          'Validar captcha se aplic√°vel'
        ],
        integrations: ['Banco de dados de usu√°rios', 'Sistema de autentica√ß√£o', 'Logs de auditoria']
      },
      'register': {
        type: 'Entrada Externa (EI)',
        complexity: complexity === 'simple' ? 'M√©dia' : complexity === 'complex' ? 'Complexa' : 'M√©dia',
        points: complexity === 'simple' ? 4 : complexity === 'complex' ? 6 : 5,
        specification: 'Processo de cadastro que coleta dados do usu√°rio, valida informa√ß√µes e cria nova conta no sistema.',
        inputFields: ['Nome completo', 'Email', 'Senha', 'Confirma√ß√£o de senha', 'Telefone (opcional)', 'Termos de uso'],
        businessRules: [
          'Email deve ser √∫nico no sistema',
          'Senha deve atender crit√©rios de seguran√ßa',
          'Enviar email de confirma√ß√£o',
          'Ativar conta ap√≥s confirma√ß√£o'
        ],
        validations: [
          'Todos os campos obrigat√≥rios preenchidos',
          'Formato de email v√°lido',
          'Senha e confirma√ß√£o devem coincidir',
          'Aceite dos termos obrigat√≥rio'
        ],
        integrations: ['Banco de dados de usu√°rios', 'Servi√ßo de email', 'Sistema de valida√ß√£o']
      },
      'dashboard': {
        type: 'Consulta Externa (EQ)',
        complexity: complexity === 'simple' ? 'M√©dia' : complexity === 'complex' ? 'Complexa' : 'M√©dia',
        points: complexity === 'simple' ? 3 : complexity === 'complex' ? 5 : 4,
        specification: 'Tela principal que apresenta resumo de informa√ß√µes, m√©tricas e atalhos para principais funcionalidades.',
        inputFields: ['Filtros de data', 'Sele√ß√£o de per√≠odo', 'Par√¢metros de visualiza√ß√£o'],
        businessRules: [
          'Mostrar apenas dados do usu√°rio logado',
          'Aplicar filtros de seguran√ßa por perfil',
          'Atualizar dados em tempo real',
          'Cachear informa√ß√µes quando poss√≠vel'
        ],
        validations: [
          'Verificar permiss√µes do usu√°rio',
          'Validar par√¢metros de filtro',
          'Limitar quantidade de dados exibidos'
        ],
        integrations: ['M√∫ltiplas fontes de dados', 'Sistema de cache', 'APIs de terceiros']
      },
      'user-management': {
        type: 'Arquivo L√≥gico Interno (ALI)',
        complexity: complexity === 'simple' ? 'M√©dia' : complexity === 'complex' ? 'Complexa' : 'M√©dia',
        points: complexity === 'simple' ? 7 : complexity === 'complex' ? 15 : 10,
        specification: 'Grupo de dados e funcionalidades para gerenciar usu√°rios, perfis e permiss√µes do sistema.',
        inputFields: ['Dados pessoais', 'Informa√ß√µes de contato', 'Perfil de acesso', 'Status da conta', 'Permiss√µes'],
        businessRules: [
          'Hierarquia de permiss√µes',
          'Auditoria de altera√ß√µes',
          'Workflow de aprova√ß√£o',
          'Notifica√ß√µes autom√°ticas'
        ],
        validations: [
          'Permiss√£o para altera√ß√£o',
          'Integridade referencial',
          'Campos obrigat√≥rios por perfil'
        ],
        integrations: ['Sistema de autentica√ß√£o', 'Workflow engine', 'Sistema de notifica√ß√µes']
      }
    };

    // Retorna dados espec√≠ficos ou dados gen√©ricos baseados no tipo
    return screenTypes[screen.id] || {
      type: 'Entrada Externa (EI)',
      complexity: complexity === 'simple' ? 'Simples' : complexity === 'complex' ? 'Complexa' : 'M√©dia',
      points: complexity === 'simple' ? 3 : complexity === 'complex' ? 6 : 4,
      specification: `Funcionalidade ${screen.name} que ${screen.description.toLowerCase()}`,
      inputFields: ['Campos de entrada padr√£o', 'Bot√µes de a√ß√£o', 'Controles de navega√ß√£o'],
      businessRules: ['Validar dados de entrada', 'Aplicar regras de neg√≥cio espec√≠ficas', 'Registrar opera√ß√µes'],
      validations: ['Campos obrigat√≥rios', 'Formato dos dados', 'Integridade das informa√ß√µes'],
      integrations: ['Banco de dados principal', 'APIs relacionadas', 'Sistemas externos']
    };
  }

  /**
   * Gera dados IFPUG para funcionalidade adicional
   */
  getIFPUGDataForFeature(feature, complexity) {
    const featureMultiplier = complexity === 'simple' ? 0.8 : complexity === 'complex' ? 1.5 : 1.0;
    const basePoints = 4;

    return {
      type: 'Funcionalidade Transversal',
      complexity: complexity === 'simple' ? 'Simples' : complexity === 'complex' ? 'Complexa' : 'M√©dia',
      points: Math.round(basePoints * featureMultiplier),
      specification: `${feature.description} - Implementa√ß√£o integrada em m√∫ltiplos componentes do sistema com configura√ß√£o centralizada e impacto em toda a aplica√ß√£o.`
    };
  }

  /**
   * Calcula total de pontos de fun√ß√£o
   */
  calculateTotalFunctionPoints(selectedScreens, selectedFeatures, projectData) {
    let total = 0;
    
    // Pontos das telas
    selectedScreens.forEach(screen => {
      const ifpugData = this.getIFPUGDataForScreen(screen, projectData.projectComplexity);
      total += ifpugData.points;
    });
    
    // Pontos das funcionalidades
    selectedFeatures.forEach(feature => {
      const ifpugData = this.getIFPUGDataForFeature(feature, projectData.projectComplexity);
      total += ifpugData.points;
    });
    
    return total;
  }

  /**
   * Gera resumo de pontos de fun√ß√£o
   */
  generateFunctionPointSummary(selectedScreens, selectedFeatures, projectData) {
    const totalPF = this.calculateTotalFunctionPoints(selectedScreens, selectedFeatures, projectData);
    const adjustmentFactor = 1.0; // Fator de ajuste t√©cnico neutro
    const adjustedPF = Math.round(totalPF * adjustmentFactor);
    
    // Estimativa de produtividade: 10-20 horas por PF dependendo da complexidade
    const productivityFactor = projectData.projectComplexity === 'simple' ? 10 : 
                              projectData.projectComplexity === 'complex' ? 20 : 15;
    const estimatedHours = adjustedPF * productivityFactor;

    return `
### Contagem de Pontos de Fun√ß√£o

| Tipo de Fun√ß√£o | Quantidade | Pontos | Subtotal |
|----------------|------------|---------|----------|
| Entradas Externas (EI) | ${selectedScreens.filter(s => this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Entrada')).length} | Vari√°vel | ${selectedScreens.reduce((sum, s) => sum + (this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Entrada') ? this.getIFPUGDataForScreen(s, projectData.projectComplexity).points : 0), 0)} PF |
| Sa√≠das Externas (EO) | ${selectedScreens.filter(s => this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Sa√≠da')).length} | Vari√°vel | ${selectedScreens.reduce((sum, s) => sum + (this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Sa√≠da') ? this.getIFPUGDataForScreen(s, projectData.projectComplexity).points : 0), 0)} PF |
| Consultas Externas (EQ) | ${selectedScreens.filter(s => this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Consulta')).length} | Vari√°vel | ${selectedScreens.reduce((sum, s) => sum + (this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Consulta') ? this.getIFPUGDataForScreen(s, projectData.projectComplexity).points : 0), 0)} PF |
| Arquivos L√≥gicos Internos (ALI) | ${selectedScreens.filter(s => this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Arquivo')).length} | Vari√°vel | ${selectedScreens.reduce((sum, s) => sum + (this.getIFPUGDataForScreen(s, projectData.projectComplexity).type.includes('Arquivo') ? this.getIFPUGDataForScreen(s, projectData.projectComplexity).points : 0), 0)} PF |
| Funcionalidades Adicionais | ${selectedFeatures.length} | ${selectedFeatures.length > 0 ? Math.round(selectedFeatures.reduce((sum, f) => sum + this.getIFPUGDataForFeature(f, projectData.projectComplexity).points, 0) / selectedFeatures.length) : 0} | ${selectedFeatures.reduce((sum, f) => sum + this.getIFPUGDataForFeature(f, projectData.projectComplexity).points, 0)} PF |

### Resumo dos Pontos de Fun√ß√£o
- **Total de PF N√£o Ajustados:** ${totalPF} PF
- **Fator de Ajuste T√©cnico:** ${adjustmentFactor}
- **Total de PF Ajustados:** ${adjustedPF} PF
- **Produtividade Estimada:** ${productivityFactor}h/PF
- **Estimativa de Esfor√ßo:** ${estimatedHours}h (${Math.ceil(estimatedHours/8)} dias √∫teis)

### Compara√ß√£o com Estimativa Inicial
- **Estimativa Inicial:** ${projectData.estimatedHours}h
- **Estimativa por PF:** ${estimatedHours}h
- **Diferen√ßa:** ${Math.abs(estimatedHours - projectData.estimatedHours)}h (${((Math.abs(estimatedHours - projectData.estimatedHours) / projectData.estimatedHours) * 100).toFixed(1)}%)
`;
  }

  /**
   * Gera justificativa para inclus√£o de tela baseada na descri√ß√£o
   */
  getJustification(screenId, description) {
    const justifications = {
      'login': 'autentica√ß√£o de usu√°rios e controle de acesso ao sistema',
      'register': 'cadastro de novos usu√°rios e expans√£o da base',
      'forgot-password': 'recupera√ß√£o de senha e melhoria da experi√™ncia do usu√°rio',
      'profile': 'gest√£o de dados pessoais e configura√ß√µes da conta',
      'user-settings': 'personaliza√ß√£o e configura√ß√µes avan√ßadas',
      'dashboard': 'visualiza√ß√£o centralizada de informa√ß√µes e m√©tricas',
      'sidebar': 'navega√ß√£o intuitiva entre funcionalidades',
      'header': 'acesso r√°pido a funcionalidades principais',
      'breadcrumb': 'orienta√ß√£o de navega√ß√£o hier√°rquica',
      'search': 'localiza√ß√£o r√°pida de informa√ß√µes',
      'data-table': 'listagem e gest√£o de dados estruturados',
      'form-create': 'cria√ß√£o de novos registros no sistema',
      'form-edit': 'edi√ß√£o e atualiza√ß√£o de dados existentes',
      'detail-view': 'visualiza√ß√£o detalhada de informa√ß√µes espec√≠ficas',
      'bulk-actions': 'opera√ß√µes em massa para efici√™ncia operacional',
      'product-catalog': 'exibi√ß√£o organizada de produtos/servi√ßos',
      'product-detail': 'informa√ß√µes detalhadas para decis√£o de compra',
      'shopping-cart': 'gest√£o de itens selecionados',
      'checkout': 'finaliza√ß√£o de transa√ß√µes e pagamentos',
      'order-history': 'hist√≥rico e acompanhamento de pedidos',
      'notifications': 'comunica√ß√£o de eventos e atualiza√ß√µes',
      'chat': 'comunica√ß√£o em tempo real entre usu√°rios',
      'email-templates': 'comunica√ß√£o automatizada via email',
      'feedback': 'coleta de opini√µes e melhorias',
      'help-center': 'suporte e documenta√ß√£o para usu√°rios',
      'analytics-dashboard': 'an√°lise de m√©tricas e performance',
      'reports': 'gera√ß√£o de relat√≥rios personalizados',
      'charts': 'visualiza√ß√£o gr√°fica de dados',
      'export-data': 'exporta√ß√£o de dados em diversos formatos',
      'real-time-metrics': 'monitoramento em tempo real',
      'admin-panel': 'gest√£o administrativa do sistema',
      'user-management': 'controle de usu√°rios e permiss√µes',
      'role-permissions': 'seguran√ßa e controle de acesso granular',
      'system-logs': 'auditoria e monitoramento de atividades',
      'backup-restore': 'seguran√ßa e continuidade dos dados'
    };

    return justifications[screenId] || 'funcionalidade essencial identificada na an√°lise do projeto';
  }

  /**
   * Gera justificativa para funcionalidade adicional
   */
  getFeatureJustification(featureId, complexity) {
    const justifications = {
      'responsive': 'Essencial para acessibilidade em dispositivos m√≥veis e tablets',
      'dark-mode': 'Melhoria na experi√™ncia do usu√°rio e redu√ß√£o de fadiga visual',
      'animations': 'Aprimoramento da experi√™ncia atrav√©s de micro-intera√ß√µes',
      'pwa': 'Funcionalidades nativas e melhor performance',
      'offline': 'Continuidade de uso mesmo sem conex√£o com internet',
      'multi-language': 'Expans√£o para p√∫blico internacional',
      'accessibility': 'Inclus√£o e conformidade com padr√µes de acessibilidade',
      'seo': 'Otimiza√ß√£o para motores de busca e visibilidade online'
    };

    const complexityNote = complexity === 'complex' ? ' (essencial para projetos complexos)' : 
                          complexity === 'medium' ? ' (recomendado para projetos m√©dios)' : '';

    return (justifications[featureId] || 'Funcionalidade identificada como necess√°ria') + complexityNote;
  }

  /**
   * Descreve forma de pagamento
   */
  getPaymentDescription(paymentMethod) {
    const descriptions = {
      'half-start-half-end': '**50% no in√≠cio** + **50% na entrega final**',
      'progress-payment': '**Pagamento por progresso** - Parcelas conforme entregas',
      'full-start-discount': '**100% antecipado** com **10% de desconto adicional**'
    };
    
    return descriptions[paymentMethod] || 'A definir conforme negocia√ß√£o';
  }

  /**
   * Simula gera√ß√£o de componentes para desenvolvimento/teste
   */
  async mockGeneration(projectData, screenDatabase, featuresDatabase) {
    // Simula delay de API
    await new Promise(resolve => setTimeout(resolve, 2000));

    const selectedScreens = screenDatabase.categories
      .flatMap(cat => cat.screens)
      .filter(screen => projectData.selectedScreens.includes(screen.id));

    const generatedFiles = selectedScreens.map(screen => ({
      path: `src/components/generated/${screen.id}/${this.capitalize(screen.id)}.js`,
      content: this.generateMockComponent(screen, projectData),
      dependencies: ['react', 'tailwindcss'],
      estimatedHours: this.calculateScreenHours(projectData.projectComplexity)
    }));

    return {
      generatedFiles,
      projectStructure: {
        totalFiles: generatedFiles.length,
        totalLines: generatedFiles.length * 150,
        estimatedDevelopmentTime: `${projectData.estimatedHours} horas`
      },
      integrationInstructions: [
        "Instalar depend√™ncias: npm install",
        "Adicionar rotas ao sistema de navega√ß√£o",
        "Configurar Firebase se necess√°rio",
        "Executar testes: npm test"
      ],
      success: true
    };
  }

  /**
   * Gera componente mock para demonstra√ß√£o
   */
  generateMockComponent(screen, projectData) {
    return `import React, { useState, useEffect } from 'react';
import { Modal, Button, Input } from '../ui';

const ${this.capitalize(screen.id)} = () => {
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState([]);

  useEffect(() => {
    // Inicializa√ß√£o do componente
    // Complexidade: ${projectData.projectComplexity}
  }, []);

  return (
    <div className="bg-white p-8 rounded-3xl border border-gray-100 shadow-sm">
      <div className="flex items-center mb-6">
        <i className="fi fi-rr-document mr-3 text-blue-500"></i>
        <h2 className="text-xl font-bold text-gray-800">${screen.name}</h2>
      </div>
      
      <div className="space-y-6">
        <p className="text-gray-600">${screen.description}</p>
        
        {/* Componente gerado automaticamente pela IA */}
        <div className="bg-gray-50 border border-gray-200 rounded-2xl p-6">
          <p className="text-sm text-gray-500">
            Este componente foi gerado automaticamente baseado nas especifica√ß√µes da proposta.
          </p>
        </div>
        
        <div className="flex justify-end space-x-4">
          <Button variant="secondary">Cancelar</Button>
          <Button variant="primary">Salvar</Button>
        </div>
      </div>
    </div>
  );
};

export default ${this.capitalize(screen.id)};`;
  }

  /**
   * Calcula horas estimadas por tela baseado na complexidade
   */
  calculateScreenHours(complexity) {
    const hours = {
      simple: 6,
      medium: 10,
      complex: 16
    };
    return hours[complexity] || 10;
  }

  /**
   * Capitaliza primeira letra
   */
  capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1).replace(/-/g, '');
  }

  /**
   * Valida se a API est√° configurada
   */
  isConfigured() {
    return !!(this.apiKey && this.baseUrl);
  }
}

const aiGeneratorService = new AIGeneratorService();
export default aiGeneratorService;